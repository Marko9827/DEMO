

var E = $.noConflict(!0); E(document).ready(function ()
{ var s, e, t, n, o = document.editor = eronelit_editorv3.fromTextArea(htmlcode, { mode: "text/html", profile: "html", keyMap: "sublime", lineNumbers: !0, lineWrapping: !1, theme: "dracula", tabSize: 4, indentUnit: 4, foldGutter: !0, gutters: ["eronelit_editorv3-linenumbers", "eronelit_editorv3-foldgutter"], matchTags: { bothTags: !0 }, matchBrackets: !1, autoCloseTags: !0, autoCloseBrackets: !0, scrollbarStyle: "overlay", styleActiveLine: !0 }), a = document.editor = eronelit_editorv3.fromTextArea(csscode, { mode: "css", profile: "css", keyMap: "sublime", lineNumbers: !0, lineWrapping: !1, theme: "dracula", tabSize: 4, indentUnit: 4, foldGutter: !0, gutters: ["eronelit_editorv3-linenumbers", "eronelit_editorv3-foldgutter"], matchBrackets: !0, autoCloseBrackets: !0, scrollbarStyle: "overlay", styleActiveLine: !0 }), i = document.editor = eronelit_editorv3.fromTextArea(jscode, { mode: "javascript", keyMap: "sublime", lineNumbers: !0, lineWrapping: !1, theme: "dracula", tabSize: 4, indentUnit: 4, foldGutter: !0, gutters: ["eronelit_editorv3-linenumbers", "eronelit_editorv3-foldgutter"], matchBrackets: !0, autoCloseBrackets: !0, scrollbarStyle: "overlay", styleActiveLine: !0 }), l = E(".font-size input"); function r(e, t) { e.getWrapperElement().style["font-size"] = t + "%", e.refresh() } function c() { var e = E("#preview").contents().find("body"); s = o.getValue(), e.html(s), d() } function d() { var e = E("#preview").contents().find("head"), t = a.getValue(); e.html('<link rel="stylesheet" href="./css/reset.css"><style>' + t + "</style>") } if (t = document.getElementById("preview"), (e = t.contentDocument ? t.contentDocument : t.contentWindow ? t.contentWindow.document : t.document).open(), e.write(s), e.close(), d(), null === localStorage.getItem("htmlcode")) { localStorage.setItem("htmlcode", '<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"><\/script>\n<main>\n    <h1>Eronelit Editor</h1>\n    <p>Real-time, responsive HTML/CSS/JS code editor</p>\n   </p>\n</main>') } if (null === localStorage.getItem("csscode")) { localStorage.setItem("csscode", '@import url("https://fonts.googleapis.com/css?family=Droid+Sans:400,700");\n\nhtml,body {\n    background-color: #282a36;\n    color: #fff;\n    font-family: "Droid Sans", sans-serif;\n    overflow: hidden;\n    text-align: center;\n}\n\nmain {\n    left: 50%;\n    position: absolute;\n    top: 50%;\n    transform: translate(-50%, -50%);\n}\n\nh1 {\n    font-size: 10rem;\n    font-weight: 400;\n    margin: 0;\n}\n\np {\n    font-size: 1rem;\n    letter-spacing: .03rem;\n    line-height: 1.45;\n    margin: 1rem 0;\n}\n\na {\n    color: #6d8a88;\n}\n\n@media only screen and (max-width: 600px) {\n    h1 {\n        font-size: 5rem;\n    }\n}') } if (null === localStorage.getItem("jscode")) { localStorage.setItem("jscode", "$(document).ready(function () {\n    $('h1').fadeOut(800).fadeIn(800);\n    $('p').first().delay(400).fadeOut(800).fadeIn(400);\n    $('p').last().delay(800).fadeOut(800).fadeIn(400);\n});") } if (null === localStorage.getItem("fontsize")) { localStorage.setItem("fontsize", "100") } o.setValue(localStorage.getItem("htmlcode")), a.setValue(localStorage.getItem("csscode")), i.setValue(localStorage.getItem("jscode")), l.val(localStorage.getItem("fontsize")), o.on("change", function () { clearTimeout(n), n = setTimeout(c, 300), localStorage.setItem("htmlcode", o.getValue()) }), a.on("change", function () { d(), localStorage.setItem("csscode", a.getValue()) }), i.on("change", function () { localStorage.setItem("jscode", i.getValue()) }), r(o, l.val()), r(a, l.val()), r(i, l.val()), c(); var p = E(".cdnjs-search .query"); function m() { p.typeahead("val", ""), p.typeahead("close") } E.get("https://api.cdnjs.com/libraries?fields=version,description").done(function (e) { var t = e.results, n = new Bloodhound({ datumTokenizer: Bloodhound.tokenizers.obj.whitespace("name"), queryTokenizer: Bloodhound.tokenizers.whitespace, local: t }); p.typeahead(null, { display: "name", name: "search", source: n, limit: 1e3, templates: { empty: function () { return '<p class="no-match">unable to match query!</p>' }, suggestion: function (e) { return '<p class="lib"><span class="name">' + e.name + '</span> <span class="version">' + e.version + '</span><br><span class="description">' + e.description + "</span></p>" } } }).on("typeahead:select", function (e, t) { !function (e) { var t; -1 !== e.indexOf("<") ? t = e : e.endsWith(".js") ? t = '<script src="' + e + '"><\/script>' : e.endsWith(".css") && (t = '<style>@import url("' + e + '");</style>'); if (-1 !== s.indexOf(t)) alert("dependency already included!"); else { var n = s.split("<\/script>").length - 1; o.replaceRange(t + "\n", { line: n, ch: 0 }), alert("dependency added successfully!") } }(t.latest), m() }).on("typeahead:change", function () { m() }) }).fail(function () { alert("error getting cdnjs libraries!") }); var h = E(".code-pane"), f = E(".preview-width"), u = E(window).width(); function g(e) { e.css({ position: "relative", visibility: "visible" }) } function v(e) { e.css({ position: "absolute", visibility: "hidden" }) } h.resizable({ handles: "e", minWidth: 0, maxWidth: u - 16, create: function () { var e = h.width(), t = u - e - 16; f.text(t + "px") }, resize: function (e, t) { var n = t.size.width, s = u - n - 16; t.element.next().css("width", u - n + "px"), t.element.next().find("iframe").css("pointer-events", "none"), f.show(), n <= 0 ? f.text(u - 16 + "px") : f.text(s + "px") }, stop: function (e, t) { t.element.next().find("iframe").css("pointer-events", "inherit"), f.hide(), o.refresh(), a.refresh(), i.refresh() } }), E(".code-swap span").not(".toggle-view").on("click", function () { var e = E(".code-pane-html"), t = E(".code-pane-css"), n = E(".code-pane-js"), s = E(".toggle-lineWrapping.html"), o = E(".toggle-lineWrapping.css"), a = E(".toggle-lineWrapping.js"), i = E(".toggle-emmet"), l = E(".preview-pane"); E(this).addClass("active").siblings().removeClass("active"), E(this).is(':contains("HTML")') ? (g(e), g(s), g(i), v(t), v(o), v(n), v(a), E(window).width() <= 800 ? v(l) : g(l)) : E(this).is(':contains("CSS")') ? (g(t), g(o), g(i), v(e), v(s), v(n), v(a), E(window).width() <= 800 ? v(l) : g(l)) : E(this).is(':contains("JS")') ? (g(n), g(a), v(e), v(s), v(t), v(o), v(i), E(window).width() <= 800 ? v(l) : g(l)) : E(this).is(':contains("preview")') && (g(l), v(e), v(s), v(t), v(o), v(n), v(a), v(i)) }); var y = E(".eronelit_editorv3-overlayscroll-vertical"), w = E(".eronelit_editorv3-overlayscroll-horizontal"); function b(e) { var o = e.defaultCharWidth(); e.on("renderLine", function (e, t, n) { var s = eronelit_editorv3.countColumn(t.text, null, e.getOption("tabSize")) * o; n.style.textIndent = "-" + s + "px", n.style.paddingLeft = 4 + s + "px" }) } y.on("mousedown", function () { E(this).addClass("hold") }), w.on("mousedown", function () { E(this).addClass("hold") }), E(document).on("mouseup", function () { y.removeClass("hold"), w.removeClass("hold") }), b(o), b(a), b(i), l.on("change keyup", function () { var e = $(this).val(); r(o, e), r(a, e), r(i, e), localStorage.setItem("fontsize", e) }), E(".toggle-view").on("click", function () { E(this).toggleClass("enabled"), E(this).hasClass("enabled") ? E(this).html('view <span class="fas fa-chevron-up"></span>') : E(this).html('view <span class="fas fa-chevron-down"></span>') }), E(".toggle-tools").on("click", function () { E(this).toggleClass("active"), E(this).hasClass("active") ? E(this).html('tools <span class="fas fa-chevron-up"></span>') : E(this).html('tools <span class="fas fa-chevron-down"></span>') }), E(".toggle-lineWrapping.html").on("click", function () { E(this).toggleClass("active"), E(this).hasClass("active") ? (o.setOption("lineWrapping", !0), E(this).html('wrap <span class="fas fa-toggle-on"></span>')) : (o.setOption("lineWrapping", !1), E(this).html('wrap <span class="fas fa-toggle-off"></span>')) }), E(".toggle-lineWrapping.css").on("click", function () { E(this).toggleClass("active"), E(this).hasClass("active") ? (a.setOption("lineWrapping", !0), E(this).html('wrap <span class="fas fa-toggle-on"></span>')) : (a.setOption("lineWrapping", !1), E(this).html('wrap <span class="fas fa-toggle-off"></span>')) }), E(".toggle-lineWrapping.js").on("click", function () { E(this).toggleClass("active"), E(this).hasClass("active") ? (i.setOption("lineWrapping", !0), E(this).html('wrap <span class="fas fa-toggle-on"></span>')) : (i.setOption("lineWrapping", !1), E(this).html('wrap <span class="fas fa-toggle-off"></span>')) }), E(".toggle-emmet").on("click", function () { E(this).toggleClass("active"), E(this).hasClass("active") ? (emmeteronelit_editorv3(o), emmeteronelit_editorv3(a), E(this).html('emmet <span class="fas fa-toggle-on"></span>')) : (emmeteronelit_editorv3.dispose(o), emmeteronelit_editorv3.dispose(a), E(this).html('emmet <span class="fas fa-toggle-off"></span>')) }), E(".reset-editor").on("click", function () { o.setValue('<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"><\/script>\n<main>\n    <h1>Eronelit Editor</h1>\n   </p>\n</main>'), a.setValue('@import url("https://fonts.googleapis.com/css?family=Droid+Sans:400,700");\n\nhtml,body {\n    background-color: #282a36;\n    color: #fff;\n    font-family: "Droid Sans", sans-serif;\n    overflow: hidden;\n    text-align: center;\n}\n\nmain {\n    left: 50%;\n    position: absolute;\n    top: 50%;\n    transform: translate(-50%, -50%);\n}\n\nh1 {\n    font-size: 10rem;\n    font-weight: 400;\n    margin: 0;\n}\n\np {\n    font-size: 1rem;\n    letter-spacing: .03rem;\n    line-height: 1.45;\n    margin: 1rem 0;\n}\n\na {\n    color: #6d8a88;\n}\n\n@media only screen and (max-width: 600px) {\n    h1 {\n        font-size: 5rem;\n    }\n}'), i.setValue("$(document).ready(function () {\n    $('h1').fadeOut(800).fadeIn(800);\n    $('p').first().delay(400).fadeOut(800).fadeIn(400);\n    $('p').last().delay(800).fadeOut(800).fadeIn(400);\n});") }), E(".refresh-editor").on("click", function () { location.reload() }), E(".clear-editor").on("click", function () { o.setValue(""), a.setValue(""), i.setValue("") }), E(".run-script").on("click", function () { var e, t, n; t = document.getElementById("preview"), n = i.getValue(), (e = t.contentDocument ? t.contentDocument : t.contentWindow ? t.contentWindow.document : t.document).open(), e.write(s + "<script>" + n + "<\/script>"), e.close(), d(), c(), E(window).width() <= 800 && E(".toggle-preview").click() }), E(".save").on("click", function () { var e = '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta name="viewport" content="width=device-width, initial-scale=1">\n<link rel="stylesheet" href="https://rawgit.com/markhillard/Editor/gh-pages/css/reset.css">\n<style>\n' + a.getValue() + "\n</style>\n</head>\n<body>\n" + o.getValue() + "\n<script>\n" + i.getValue() + "\n<\/script>\n</body>\n</html>\n", t = new Blob([e], { type: "text/html; charset=utf-8" }); saveAs(t, "editor.html") }), o.refresh(), a.refresh(), i.refresh() });
